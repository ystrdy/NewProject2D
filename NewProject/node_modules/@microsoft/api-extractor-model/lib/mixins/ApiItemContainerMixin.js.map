{"version":3,"file":"ApiItemContainerMixin.js","sourceRoot":"","sources":["../../src/mixins/ApiItemContainerMixin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.s\r\n\r\nimport { ApiItem, ApiItem_parent, IApiItemJson, IApiItemOptions, IApiItemConstructor } from '../items/ApiItem';\r\nimport { ApiNameMixin } from './ApiNameMixin';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\n\r\n/**\r\n * Constructor options for {@link (ApiItemContainerMixin:interface)}.\r\n * @public\r\n */\r\nexport interface IApiItemContainerMixinOptions extends IApiItemOptions {\r\n  members?: ApiItem[];\r\n}\r\n\r\nexport interface IApiItemContainerJson extends IApiItemJson {\r\n  members: IApiItemJson[];\r\n}\r\n\r\nconst _members: unique symbol = Symbol('ApiItemContainerMixin._members');\r\nconst _membersSorted: unique symbol = Symbol('ApiItemContainerMixin._membersSorted');\r\nconst _membersByCanonicalReference: unique symbol = Symbol('ApiItemContainerMixin._membersByCanonicalReference');\r\nconst _membersByName: unique symbol = Symbol('ApiItemContainerMixin._membersByName');\r\n\r\n/**\r\n * The mixin base class for API items that act as containers for other child items.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.  The non-abstract classes (e.g. `ApiClass`, `ApiEnum`, `ApiInterface`, etc.) use\r\n * TypeScript \"mixin\" functions (e.g. `ApiDeclaredItem`, `ApiItemContainerMixin`, etc.) to add various\r\n * features that cannot be represented as a normal inheritance chain (since TypeScript does not allow a child class\r\n * to extend more than one base class).  The \"mixin\" is a TypeScript merged declaration with three components:\r\n * the function that generates a subclass, an interface that describes the members of the subclass, and\r\n * a namespace containing static members of the class.\r\n *\r\n * Examples of `ApiItemContainerMixin` child classes include `ApiModel`, `ApiPackage`, `ApiEntryPoint`,\r\n * and `ApiEnum`.  But note that `Parameter` is not considered a \"member\" of an `ApiMethod`; this relationship\r\n * is modeled using {@link (ApiParameterListMixin:interface).parameters} instead\r\n * of {@link (ApiItemContainerMixin:interface).members}.\r\n *\r\n * @public\r\n */\r\n// tslint:disable-next-line:interface-name\r\nexport interface ApiItemContainerMixin extends ApiItem {\r\n  /**\r\n   * Returns the members of this container, sorted alphabetically.\r\n   */\r\n  readonly members: ReadonlyArray<ApiItem>;\r\n\r\n  /**\r\n   * Adds a new member to the container.\r\n   *\r\n   * @remarks\r\n   * An ApiItem cannot be added to more than one container.\r\n   */\r\n  addMember(member: ApiItem): void;\r\n\r\n  /**\r\n   * Attempts to retrieve a member using its canonicalReference, or returns undefined if no matching member was found.\r\n   */\r\n  tryGetMember(canonicalReference: string): ApiItem | undefined;\r\n\r\n  /**\r\n   * Returns a list of members with the specified name.\r\n   */\r\n  findMembersByName(name: string): ReadonlyArray<ApiItem>;\r\n\r\n  /** @override */\r\n  serializeInto(jsonObject: Partial<IApiItemJson>): void;\r\n}\r\n\r\n/**\r\n * Mixin function for {@link ApiDeclaredItem}.\r\n *\r\n * @param baseClass - The base class to be extended\r\n * @returns A child class that extends baseClass, adding the {@link (ApiItemContainerMixin:interface)} functionality.\r\n *\r\n * @public\r\n */\r\nexport function ApiItemContainerMixin<TBaseClass extends IApiItemConstructor>(baseClass: TBaseClass):\r\n  TBaseClass & (new (...args: any[]) => ApiItemContainerMixin) { // tslint:disable-line:no-any\r\n\r\n  abstract class MixedClass extends baseClass implements ApiItemContainerMixin {\r\n    public readonly [_members]: ApiItem[];\r\n    public [_membersSorted]: boolean;\r\n    public [_membersByCanonicalReference]: Map<string, ApiItem>;\r\n    public [_membersByName]: Map<string, ApiItem[]> | undefined;\r\n\r\n    /** @override */\r\n    public static onDeserializeInto(options: Partial<IApiItemContainerMixinOptions>,\r\n      context: DeserializerContext, jsonObject: IApiItemContainerJson): void {\r\n\r\n      baseClass.onDeserializeInto(options, context, jsonObject);\r\n\r\n      options.members = [];\r\n      for (const memberObject of jsonObject.members) {\r\n        options.members.push(ApiItem.deserialize(memberObject, context));\r\n      }\r\n    }\r\n\r\n    // tslint:disable-next-line:no-any\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n      const options: IApiItemContainerMixinOptions = args[0] as IApiItemContainerMixinOptions;\r\n\r\n      this[_members] = [];\r\n      this[_membersByCanonicalReference] = new Map<string, ApiItem>();\r\n\r\n      if (options.members) {\r\n        for (const member of options.members) {\r\n          this.addMember(member);\r\n        }\r\n      }\r\n    }\r\n\r\n    public get members(): ReadonlyArray<ApiItem> {\r\n      if (!this[_membersSorted]) {\r\n        this[_members].sort((x, y) => x.getSortKey().localeCompare(y.getSortKey()));\r\n        this[_membersSorted] = true;\r\n      }\r\n\r\n      return this[_members];\r\n    }\r\n\r\n    public addMember(member: ApiItem): void {\r\n      if (this[_membersByCanonicalReference].has(member.canonicalReference)) {\r\n        throw new Error('Another member has already been added with the same name and canonicalReference');\r\n      }\r\n\r\n      const existingParent: ApiItem | undefined = member[ApiItem_parent];\r\n      if (existingParent !== undefined) {\r\n        throw new Error(`This item has already been added to another container: \"${existingParent.displayName}\"`);\r\n      }\r\n\r\n      this[_members].push(member);\r\n      this[_membersByName] = undefined; // invalidate the lookup\r\n      this[_membersSorted] = false;\r\n      this[_membersByCanonicalReference].set(member.canonicalReference, member);\r\n\r\n      member[ApiItem_parent] = this;\r\n    }\r\n\r\n    public tryGetMember(canonicalReference: string): ApiItem | undefined {\r\n      return this[_membersByCanonicalReference].get(canonicalReference);\r\n    }\r\n\r\n    public findMembersByName(name: string): ReadonlyArray<ApiItem> {\r\n      // Build the lookup on demand\r\n      if (this[_membersByName] === undefined) {\r\n        const map: Map<string, ApiItem[]> = new Map<string, ApiItem[]>();\r\n\r\n        for (const member of this[_members]) {\r\n          if (ApiNameMixin.isBaseClassOf(member)) {\r\n            let list: ApiItem[] | undefined = map.get(member.name);\r\n            if (list === undefined) {\r\n              list = [];\r\n              map.set(member.name, list);\r\n            }\r\n            list.push(member);\r\n          }\r\n        }\r\n\r\n        this[_membersByName] = map;\r\n      }\r\n\r\n      return this[_membersByName]!.get(name) || [];\r\n    }\r\n\r\n    /** @override */\r\n    public serializeInto(jsonObject: Partial<IApiItemContainerJson>): void {\r\n      super.serializeInto(jsonObject);\r\n\r\n      const memberObjects: IApiItemJson[] = [];\r\n\r\n      for (const member of this.members) {\r\n        const memberJsonObject: Partial<IApiItemJson> = {};\r\n        member.serializeInto(memberJsonObject);\r\n        memberObjects.push(memberJsonObject as IApiItemJson);\r\n      }\r\n\r\n      jsonObject.members = memberObjects;\r\n    }\r\n  }\r\n\r\n  return MixedClass;\r\n}\r\n\r\n/**\r\n * Static members for {@link (ApiItemContainerMixin:interface)}.\r\n * @public\r\n */\r\nexport namespace ApiItemContainerMixin {\r\n  /**\r\n   * A type guard that tests whether the specified `ApiItem` subclass extends the `ApiItemContainerMixin` mixin.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The JavaScript `instanceof` operator cannot be used to test for mixin inheritance, because each invocation of\r\n   * the mixin function produces a different subclass.  (This could be mitigated by `Symbol.hasInstance`, however\r\n   * the TypeScript type system cannot invoke a runtime test.)\r\n   */\r\n  export function isBaseClassOf(apiItem: ApiItem): apiItem is ApiItemContainerMixin {\r\n    return apiItem.hasOwnProperty(_members);\r\n  }\r\n}\r\n"]}