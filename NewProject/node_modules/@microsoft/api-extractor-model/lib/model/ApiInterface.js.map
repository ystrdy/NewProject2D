{"version":3,"file":"ApiInterface.js","sourceRoot":"","sources":["../../src/model/ApiInterface.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,2EAC2C;AAC3C,8DAA0G;AAC1G,qEAAuH;AAEvH,iDAA8C;AAC9C,yDAA+F;AAC/F,mFAC+C;AA2B/C;;;;;;;;;;;;;;;;GAgBG;AACH,MAAa,YAAa,SAAQ,6CAAqB,CAAC,2BAAY,CAAC,qDAAyB,CAAC,uCAAkB,CAC/G,iCAAe,CAAC,CAAC,CAAC,CAAC;IAiBnB,YAAmB,OAA6B;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC;QAhBA,kBAAa,GAAmB,EAAE,CAAC;QAkBlD,KAAK,MAAM,iBAAiB,IAAI,OAAO,CAAC,kBAAkB,EAAE;YAC1D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,2BAAY,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;SACjF;IACH,CAAC;IAnBM,MAAM,CAAC,qBAAqB,CAAC,IAAY;QAC9C,OAAO,IAAI,IAAI,aAAa,CAAC;IAC/B,CAAC;IAED,gBAAgB;IACT,MAAM,CAAC,iBAAiB,CAAC,OAAsC,EAAE,OAA4B,EAClG,UAA6B;QAE7B,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAEtD,OAAO,CAAC,kBAAkB,GAAG,UAAU,CAAC,kBAAkB,CAAC;IAC7D,CAAC;IAUD,gBAAgB;IAChB,IAAW,IAAI;QACb,mCAA6B;IAC/B,CAAC;IAED,gBAAgB;IAChB,IAAW,kBAAkB;QAC3B,OAAO,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,gBAAgB;IACT,aAAa,CAAC,UAAsC;QACzD,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAEhC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACnF,CAAC;CACF;AAjDD,oCAiDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiItemContainerMixin, IApiItemContainerMixinOptions, IApiItemContainerJson\r\n  } from '../mixins/ApiItemContainerMixin';\r\nimport { ApiDeclaredItem, IApiDeclaredItemOptions, IApiDeclaredItemJson } from '../items/ApiDeclaredItem';\r\nimport { IApiReleaseTagMixinOptions, ApiReleaseTagMixin, IApiReleaseTagMixinJson } from '../mixins/ApiReleaseTagMixin';\r\nimport { IExcerptTokenRange } from '../mixins/Excerpt';\r\nimport { HeritageType } from './HeritageType';\r\nimport { IApiNameMixinOptions, ApiNameMixin, IApiNameMixinJson } from '../mixins/ApiNameMixin';\r\nimport { IApiTypeParameterListMixinOptions, IApiTypeParameterListMixinJson, ApiTypeParameterListMixin\r\n  } from '../mixins/ApiTypeParameterListMixin';\r\nimport { DeserializerContext } from './DeserializerContext';\r\n\r\n/**\r\n * Constructor options for {@link ApiInterface}.\r\n * @public\r\n */\r\nexport interface IApiInterfaceOptions extends\r\n  IApiItemContainerMixinOptions,\r\n  IApiNameMixinOptions,\r\n  IApiTypeParameterListMixinOptions,\r\n  IApiReleaseTagMixinOptions,\r\n  IApiDeclaredItemOptions {\r\n\r\n  extendsTokenRanges: IExcerptTokenRange[];\r\n}\r\n\r\nexport interface IApiInterfaceJson extends\r\n  IApiItemContainerJson,\r\n  IApiNameMixinJson,\r\n  IApiTypeParameterListMixinJson,\r\n  IApiReleaseTagMixinJson,\r\n  IApiDeclaredItemJson {\r\n\r\n  extendsTokenRanges: IExcerptTokenRange[];\r\n}\r\n\r\n/**\r\n * Represents a TypeScript class declaration.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiInterface` represents a TypeScript declaration such as this:\r\n *\r\n * ```ts\r\n * export interface X extends Y {\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nexport class ApiInterface extends ApiItemContainerMixin(ApiNameMixin(ApiTypeParameterListMixin(ApiReleaseTagMixin(\r\n  ApiDeclaredItem)))) {\r\n\r\n  private readonly _extendsTypes: HeritageType[] = [];\r\n\r\n  public static getCanonicalReference(name: string): string {\r\n    return `(${name}:interface)`;\r\n  }\r\n\r\n  /** @override */\r\n  public static onDeserializeInto(options: Partial<IApiInterfaceOptions>, context: DeserializerContext,\r\n    jsonObject: IApiInterfaceJson): void {\r\n\r\n    super.onDeserializeInto(options, context, jsonObject);\r\n\r\n    options.extendsTokenRanges = jsonObject.extendsTokenRanges;\r\n  }\r\n\r\n  public constructor(options: IApiInterfaceOptions) {\r\n    super(options);\r\n\r\n    for (const extendsTokenRange of options.extendsTokenRanges) {\r\n      this._extendsTypes.push(new HeritageType(this.buildExcerpt(extendsTokenRange)));\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Interface;\r\n  }\r\n\r\n  /** @override */\r\n  public get canonicalReference(): string {\r\n    return ApiInterface.getCanonicalReference(this.name);\r\n  }\r\n\r\n  /**\r\n   * The list of base interfaces that this interface inherits from using the `extends` keyword.\r\n   */\r\n  public get extendsTypes(): ReadonlyArray<HeritageType> {\r\n    return this._extendsTypes;\r\n  }\r\n\r\n  /** @override */\r\n  public serializeInto(jsonObject: Partial<IApiInterfaceJson>): void {\r\n    super.serializeInto(jsonObject);\r\n\r\n    jsonObject.extendsTokenRanges = this.extendsTypes.map(x => x.excerpt.tokenRange);\r\n  }\r\n}\r\n"]}