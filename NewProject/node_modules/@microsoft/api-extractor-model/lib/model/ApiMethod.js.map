{"version":3,"file":"ApiMethod.js","sourceRoot":"","sources":["../../src/model/ApiMethod.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,6DAAkF;AAClF,8DAAoF;AACpF,2EAAuG;AACvG,qEAA8F;AAC9F,qEAA8F;AAC9F,yDAA4E;AAC5E,mFAAmH;AAgBnH;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAa,SAAU,SAAQ,2BAAY,CAAC,qDAAyB,CAAC,6CAAqB,CACzF,uCAAkB,CAAC,uCAAkB,CAAC,+BAAc,CAAC,iCAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnE,MAAM,CAAC,qBAAqB,CAAC,IAAY,EAAE,QAAiB,EAAE,aAAqB;QACxF,IAAI,QAAQ,EAAE;YACZ,OAAO,IAAI,IAAI,WAAW,aAAa,GAAG,CAAC;SAC5C;aAAM;YACL,OAAO,IAAI,IAAI,aAAa,aAAa,GAAG,CAAC;SAC9C;IACH,CAAC;IAED,YAAmB,OAA0B;QAC3C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,6BAA0B;IAC5B,CAAC;IAED,gBAAgB;IAChB,IAAW,kBAAkB;QAC3B,OAAO,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACvF,CAAC;CACF;AAxBD,8BAwBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiStaticMixin, IApiStaticMixinOptions } from '../mixins/ApiStaticMixin';\r\nimport { IApiDeclaredItemOptions, ApiDeclaredItem } from '../items/ApiDeclaredItem';\r\nimport { IApiParameterListMixinOptions, ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\nimport { IApiReleaseTagMixinOptions, ApiReleaseTagMixin } from '../mixins/ApiReleaseTagMixin';\r\nimport { ApiReturnTypeMixin, IApiReturnTypeMixinOptions } from '../mixins/ApiReturnTypeMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\nimport { ApiTypeParameterListMixin, IApiTypeParameterListMixinOptions } from '../mixins/ApiTypeParameterListMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiMethod}.\r\n * @public\r\n */\r\nexport interface IApiMethodOptions extends\r\n  IApiNameMixinOptions,\r\n  IApiTypeParameterListMixinOptions,\r\n  IApiParameterListMixinOptions,\r\n  IApiReleaseTagMixinOptions,\r\n  IApiReturnTypeMixinOptions,\r\n  IApiStaticMixinOptions,\r\n  IApiDeclaredItemOptions {\r\n}\r\n\r\n/**\r\n * Represents a TypeScript member function declaration that belongs to an `ApiClass`.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiMethod` represents a TypeScript declaration such as the `render` member function in this example:\r\n *\r\n * ```ts\r\n * export class Widget {\r\n *   public render(): void { }\r\n * }\r\n * ```\r\n *\r\n * Compare with {@link ApiMethodSignature}, which represents a method belonging to an interface.\r\n * For example, a class method can be `static` but an interface method cannot.\r\n *\r\n * @public\r\n */\r\nexport class ApiMethod extends ApiNameMixin(ApiTypeParameterListMixin(ApiParameterListMixin(\r\n  ApiReleaseTagMixin(ApiReturnTypeMixin(ApiStaticMixin(ApiDeclaredItem)))))) {\r\n\r\n  public static getCanonicalReference(name: string, isStatic: boolean, overloadIndex: number): string {\r\n    if (isStatic) {\r\n      return `(${name}:static,${overloadIndex})`;\r\n    } else {\r\n      return `(${name}:instance,${overloadIndex})`;\r\n    }\r\n  }\r\n\r\n  public constructor(options: IApiMethodOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Method;\r\n  }\r\n\r\n  /** @override */\r\n  public get canonicalReference(): string {\r\n    return ApiMethod.getCanonicalReference(this.name, this.isStatic, this.overloadIndex);\r\n  }\r\n}\r\n"]}