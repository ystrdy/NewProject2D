{"version":3,"file":"ValidationEnhancer.js","sourceRoot":"","sources":["../../src/enhancers/ValidationEnhancer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as ts from 'typescript';\r\n\r\nimport { Collector } from '../collector/Collector';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { SymbolMetadata } from '../collector/SymbolMetadata';\r\nimport { CollectorEntity } from '../collector/CollectorEntity';\r\nimport { ExtractorMessageId } from '../api/ExtractorMessageId';\r\nimport { ReleaseTag } from '@microsoft/api-extractor-model';\r\n\r\nexport class ValidationEnhancer {\r\n\r\n  public static analyze(collector: Collector): void {\r\n    const alreadyWarnedSymbols: Set<AstSymbol> = new Set<AstSymbol>();\r\n\r\n    for (const entity of collector.entities) {\r\n      if (entity.astEntity instanceof AstSymbol) {\r\n        if (entity.exported) {\r\n          entity.astEntity.forEachDeclarationRecursive((astDeclaration: AstDeclaration) => {\r\n            ValidationEnhancer._checkReferences(collector, astDeclaration, alreadyWarnedSymbols);\r\n          });\r\n\r\n          ValidationEnhancer._checkForInternalUnderscore(collector, entity, entity.astEntity);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _checkForInternalUnderscore(collector: Collector, collectorEntity: CollectorEntity,\r\n    astSymbol: AstSymbol): void {\r\n\r\n    const astSymbolMetadata: SymbolMetadata = collector.fetchMetadata(astSymbol);\r\n\r\n    if (astSymbolMetadata.releaseTag === ReleaseTag.Internal && !astSymbolMetadata.releaseTagSameAsParent) {\r\n      for (const exportName of collectorEntity.exportNames) {\r\n        if (exportName[0] !== '_') {\r\n          collector.messageRouter.addAnalyzerIssue(\r\n            ExtractorMessageId.InternalMissingUnderscore,\r\n            `The name \"${exportName}\" should be prefixed with an underscore`\r\n            + ` because the declaration is marked as @internal`,\r\n            astSymbol,\r\n            { exportName }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private static _checkReferences(collector: Collector, astDeclaration: AstDeclaration,\r\n    alreadyWarnedSymbols: Set<AstSymbol>): void {\r\n\r\n    const astSymbolMetadata: SymbolMetadata = collector.fetchMetadata(astDeclaration.astSymbol);\r\n    const astSymbolReleaseTag: ReleaseTag = astSymbolMetadata.releaseTag;\r\n\r\n    for (const referencedEntity of astDeclaration.referencedAstEntities) {\r\n\r\n      if (referencedEntity instanceof AstSymbol) {\r\n        // If this is e.g. a member of a namespace, then we need to be checking the top-level scope to see\r\n        // whether it's exported.\r\n        //\r\n        // TODO: Technically we should also check each of the nested scopes along the way.\r\n        const rootSymbol: AstSymbol = referencedEntity.rootAstSymbol;\r\n\r\n        if (!rootSymbol.isExternal) {\r\n          const collectorEntity: CollectorEntity | undefined = collector.tryGetCollectorEntity(rootSymbol);\r\n\r\n          if (collectorEntity && collectorEntity.exported) {\r\n            const referencedMetadata: SymbolMetadata = collector.fetchMetadata(referencedEntity);\r\n            const referencedReleaseTag: ReleaseTag = referencedMetadata.releaseTag;\r\n\r\n            if (ReleaseTag.compare(astSymbolReleaseTag, referencedReleaseTag) > 0) {\r\n              collector.messageRouter.addAnalyzerIssue(ExtractorMessageId.IncompatibleReleaseTags,\r\n                `The symbol \"${astDeclaration.astSymbol.localName}\"`\r\n                + ` is marked as ${ReleaseTag.getTagName(astSymbolReleaseTag)},`\r\n                + ` but its signature references \"${referencedEntity.localName}\"`\r\n                + ` which is marked as ${ReleaseTag.getTagName(referencedReleaseTag)}`,\r\n                astDeclaration);\r\n            }\r\n          } else {\r\n            const entryPointFilename: string = path.basename(collector.workingPackage.entryPointSourceFile.fileName);\r\n\r\n            if (!alreadyWarnedSymbols.has(referencedEntity)) {\r\n              alreadyWarnedSymbols.add(referencedEntity);\r\n\r\n              // The main usage scenario for ECMAScript symbols is to attach private data to a JavaScript object,\r\n              // so as a special case, we do NOT report them as forgotten exports.\r\n              if (!ValidationEnhancer._isEcmaScriptSymbol(referencedEntity)) {\r\n\r\n                collector.messageRouter.addAnalyzerIssue(ExtractorMessageId.ForgottenExport,\r\n                  `The symbol \"${rootSymbol.localName}\" needs to be exported`\r\n                    + ` by the entry point ${entryPointFilename}`,\r\n                  astDeclaration);\r\n              }\r\n\r\n            }\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Detect an AstSymbol that refers to an ECMAScript symbol declaration such as:\r\n  //\r\n  // const mySymbol: unique symbol = Symbol('mySymbol');\r\n  private static _isEcmaScriptSymbol(astSymbol: AstSymbol): boolean {\r\n    if (astSymbol.astDeclarations.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    // We are matching a form like this:\r\n    //\r\n    // - VariableDeclaration:\r\n    //   - Identifier:  pre=[mySymbol]\r\n    //   - ColonToken:  pre=[:] sep=[ ]\r\n    //   - TypeOperator:\r\n    //     - UniqueKeyword:  pre=[unique] sep=[ ]\r\n    //     - SymbolKeyword:  pre=[symbol]\r\n    const astDeclaration: AstDeclaration = astSymbol.astDeclarations[0];\r\n    if (ts.isVariableDeclaration(astDeclaration.declaration)) {\r\n      const variableTypeNode: ts.TypeNode | undefined = astDeclaration.declaration.type;\r\n      if (variableTypeNode) {\r\n        for (const token of variableTypeNode.getChildren()) {\r\n          if (token.kind === ts.SyntaxKind.SymbolKeyword) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n"]}