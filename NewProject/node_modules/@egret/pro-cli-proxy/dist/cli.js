"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var args_1 = __importDefault(require("args"));
var path_1 = __importDefault(require("path"));
var lib = require("./index");
args_1.default
    .option('name', 'engine name')
    .option('path', 'engine path')
    .command('set', 'set engine name and path', function (command, sub, options) {
    var name = options.name, path = options.path;
    lib.setEngineRoot(name, path);
});
args_1.default
    .option('name', 'engine name')
    .command('get', 'get engine path by name', function (command, sub, options) {
    console.log(command, sub, options);
});
var sub = process.argv.concat().splice(3);
var projectRoot = parseProjectRoot(sub);
lib.init(projectRoot);
var EgretCompiler = lib.getCompiler().EgretCompiler;
var optionsConfig = EgretCompiler.getOptionsConfig();
var _loop_1 = function (methodConfig) {
    var a = args_1.default;
    for (var _i = 0, _a = methodConfig.options; _i < _a.length; _i++) {
        var option = _a[_i];
        a = args_1.default.option(option.name, option.description);
    }
    a.command(methodConfig.method, methodConfig.description, function (command, sub, options) {
        var projectConfigPath = sub[0];
        if (!projectConfigPath) {
            console.log("请输入项目配置文件");
            process.exit(1);
        }
        var cwd = path_1.default.resolve(process.cwd(), path_1.default.dirname(projectConfigPath));
        var compiler = new EgretCompiler(cwd);
        var method = compiler[methodConfig.method];
        executeWithErrorHandling(method.call(compiler, options || {}));
    });
};
for (var _i = 0, optionsConfig_1 = optionsConfig; _i < optionsConfig_1.length; _i++) {
    var methodConfig = optionsConfig_1[_i];
    _loop_1(methodConfig);
}
function executeWithErrorHandling(p) {
    p.catch(function (e) {
        if (e.code) {
            process.stderr.write(e.message + '\n');
            process.exit(e.code);
        }
        else {
            throw e;
        }
    });
}
function parseProjectRoot(sub) {
    var result = sub[0] ? sub[0] : ".";
    if (!path_1.default.isAbsolute(result)) {
        return path_1.default.resolve(process.cwd(), result);
    }
    else {
        return result;
    }
}
var flags = args_1.default.parse(process.argv);
