"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var engineManager = __importStar(require("@egret/engine-manager"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var strip_json_comments_1 = __importDefault(require("strip-json-comments"));
var projectRoot;
function init(root) {
    projectRoot = root;
}
exports.init = init;
function getEgretProCli() {
    var m = requireModule('./toolkit/pro-cli');
    return m;
}
exports.getEgretProCli = getEgretProCli;
function createProject(destinationPath, options) {
    var engineName = options.engineName;
    var engineRoot = getEngineRoot(engineName);
    var m = requireModule('./toolkit/pro-cli', engineRoot);
    m.create(destinationPath, options);
}
exports.createProject = createProject;
function getChildProcessCompiler() {
    var m = requireModule('./toolkit/child-process-compiler');
    return m;
}
exports.getChildProcessCompiler = getChildProcessCompiler;
function getCompiler() {
    var m = requireModule('./toolkit/compiler');
    return m;
}
exports.getCompiler = getCompiler;
function setEngineRoot(name, root) {
    engineManager.setEngineRoot(name, root);
}
exports.setEngineRoot = setEngineRoot;
function getEngineRoot(name) {
    return engineManager.getEngineRoot(name);
}
exports.getEngineRoot = getEngineRoot;
function getEngineList() {
    return engineManager.getEngineList();
}
exports.getEngineList = getEngineList;
function getCurrentEngineRoot() {
    var engineName = getEngineName();
    var engineRoot = getEngineRoot(engineName);
    if (!engineRoot) {
        throw new Error("未找到 engineRoot,请在 EgretPro 中进行设置");
    }
    return engineRoot;
}
function requireModule(name, egretProRoot) {
    egretProRoot = egretProRoot || getCurrentEngineRoot();
    var cliPath = path.join(egretProRoot, name);
    var globalThis = global;
    var r = globalThis.require || eval('require');
    var m = r(cliPath);
    if (m.setEgretProRoot) {
        m.setEgretProRoot(egretProRoot);
    }
    return m;
}
function getEngineName() {
    var projectFilepath = path.join(projectRoot, 'egretpro.json');
    var content = fs.readFileSync(projectFilepath, 'utf-8');
    var json = JSON.parse(strip_json_comments_1.default(content));
    var engineName = json.engineName;
    if (!engineName) {
        throw new Error("未找到 engineName 字段,请在 egretpro.json 中设置 engineName 字段");
    }
    else {
        return engineName;
    }
}
