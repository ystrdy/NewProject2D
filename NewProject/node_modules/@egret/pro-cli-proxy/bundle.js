async function apiExtractor(packageName) {
    const path = require('path');
    const {
        Extractor,
        ExtractorConfig
    } = require('@microsoft/api-extractor');

    const apiExtractorJsonPath = path.join(__dirname, './api-extractor.json');

    // Load and parse the api-extractor.json file
    // const extractorConfig = ExtractorConfig.loadFileAndPrepare(apiExtractorJsonPath);

    const configObjectFullPath = path.resolve(apiExtractorJsonPath);
    const configObject = ExtractorConfig.loadFile(apiExtractorJsonPath);

    // const projectFolder = path.resolve(__dirname, '../packages/', packageName);
    const projectFolder = path.resolve(__dirname, packageName);
    configObject.projectFolder = projectFolder;
    // const packageJsonLookup = new node_core_library_1.PackageJsonLookup();
    const packageJsonFullPath = path.resolve(projectFolder, 'package.json'); //packageJsonLookup.tryGetPackageJsonFilePathFor(configObjectFullPath);
    const extractorConfig = ExtractorConfig.prepare({
        configObject,
        configObjectFullPath,
        packageJsonFullPath
    });
    // return extractorConfig;

    // Invoke API Extractor
    const extractorResult = Extractor.invoke(extractorConfig, {
        // Equivalent to the "--local" command-line parameter
        localBuild: true,

        // Equivalent to the "--verbose" command-line parameter
        showVerboseMessages: false
    });

    if (extractorResult.succeeded) {
        console.log(`API Extractor completed successfully`);
        process.exitCode = 0;
    } else {
        console.error(`API Extractor completed with ${extractorResult.errorCount} errors` +
            ` and ${extractorResult.warningCount} warnings`);
        process.exitCode = 1;
    }
}

async function run() {
    await apiExtractor('../pro-cli');
    await apiExtractor('../child-process-compiler');
    await apiExtractor('../compiler');
}

run();